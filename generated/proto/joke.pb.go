// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/joke.proto

package joke

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Joke struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Setup                string   `protobuf:"bytes,3,opt,name=setup,proto3" json:"setup,omitempty"`
	Punchline            string   `protobuf:"bytes,4,opt,name=punchline,proto3" json:"punchline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Joke) Reset()         { *m = Joke{} }
func (m *Joke) String() string { return proto.CompactTextString(m) }
func (*Joke) ProtoMessage()    {}
func (*Joke) Descriptor() ([]byte, []int) {
	return fileDescriptor_29430ba4cc2d726c, []int{0}
}

func (m *Joke) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Joke.Unmarshal(m, b)
}
func (m *Joke) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Joke.Marshal(b, m, deterministic)
}
func (m *Joke) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Joke.Merge(m, src)
}
func (m *Joke) XXX_Size() int {
	return xxx_messageInfo_Joke.Size(m)
}
func (m *Joke) XXX_DiscardUnknown() {
	xxx_messageInfo_Joke.DiscardUnknown(m)
}

var xxx_messageInfo_Joke proto.InternalMessageInfo

func (m *Joke) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Joke) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Joke) GetSetup() string {
	if m != nil {
		return m.Setup
	}
	return ""
}

func (m *Joke) GetPunchline() string {
	if m != nil {
		return m.Punchline
	}
	return ""
}

type JokesReply struct {
	Jokes                []*Joke  `protobuf:"bytes,1,rep,name=jokes,proto3" json:"jokes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JokesReply) Reset()         { *m = JokesReply{} }
func (m *JokesReply) String() string { return proto.CompactTextString(m) }
func (*JokesReply) ProtoMessage()    {}
func (*JokesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_29430ba4cc2d726c, []int{1}
}

func (m *JokesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JokesReply.Unmarshal(m, b)
}
func (m *JokesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JokesReply.Marshal(b, m, deterministic)
}
func (m *JokesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JokesReply.Merge(m, src)
}
func (m *JokesReply) XXX_Size() int {
	return xxx_messageInfo_JokesReply.Size(m)
}
func (m *JokesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_JokesReply.DiscardUnknown(m)
}

var xxx_messageInfo_JokesReply proto.InternalMessageInfo

func (m *JokesReply) GetJokes() []*Joke {
	if m != nil {
		return m.Jokes
	}
	return nil
}

type JokesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JokesRequest) Reset()         { *m = JokesRequest{} }
func (m *JokesRequest) String() string { return proto.CompactTextString(m) }
func (*JokesRequest) ProtoMessage()    {}
func (*JokesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29430ba4cc2d726c, []int{2}
}

func (m *JokesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JokesRequest.Unmarshal(m, b)
}
func (m *JokesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JokesRequest.Marshal(b, m, deterministic)
}
func (m *JokesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JokesRequest.Merge(m, src)
}
func (m *JokesRequest) XXX_Size() int {
	return xxx_messageInfo_JokesRequest.Size(m)
}
func (m *JokesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JokesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JokesRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Joke)(nil), "Joke")
	proto.RegisterType((*JokesReply)(nil), "JokesReply")
	proto.RegisterType((*JokesRequest)(nil), "JokesRequest")
}

func init() {
	proto.RegisterFile("proto/joke.proto", fileDescriptor_29430ba4cc2d726c)
}

var fileDescriptor_29430ba4cc2d726c = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0xca, 0xcf, 0x4e, 0xd5, 0x03, 0x33, 0x95, 0xe2, 0xb8, 0x58, 0xbc, 0xf2, 0xb3,
	0x53, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x98, 0x32,
	0x53, 0x84, 0x84, 0xb8, 0x58, 0x4a, 0x2a, 0x0b, 0x52, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83,
	0xc0, 0x6c, 0x21, 0x11, 0x2e, 0xd6, 0xe2, 0xd4, 0x92, 0xd2, 0x02, 0x09, 0x66, 0xb0, 0x20, 0x84,
	0x23, 0x24, 0xc3, 0xc5, 0x59, 0x50, 0x9a, 0x97, 0x9c, 0x91, 0x93, 0x99, 0x97, 0x2a, 0xc1, 0x02,
	0x96, 0x41, 0x08, 0x28, 0x69, 0x72, 0x71, 0x81, 0xcc, 0x2f, 0x0e, 0x4a, 0x2d, 0xc8, 0xa9, 0x14,
	0x92, 0xe6, 0x62, 0x05, 0xd9, 0x5d, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d, 0xc4, 0xaa, 0x07,
	0x92, 0x0b, 0x82, 0x88, 0x29, 0xf1, 0x71, 0xf1, 0x40, 0x95, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x18,
	0xe9, 0x73, 0xb1, 0x82, 0xf8, 0x45, 0x42, 0x6a, 0x5c, 0x1c, 0xee, 0xa9, 0x25, 0x60, 0x39, 0x21,
	0x5e, 0x3d, 0x64, 0x35, 0x52, 0xdc, 0x7a, 0x08, 0xd3, 0x93, 0xd8, 0xc0, 0x5e, 0x32, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xe5, 0xe4, 0xc6, 0x86, 0xe6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JokerClient is the client API for Joker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JokerClient interface {
	GetJokes(ctx context.Context, in *JokesRequest, opts ...grpc.CallOption) (*JokesReply, error)
}

type jokerClient struct {
	cc grpc.ClientConnInterface
}

func NewJokerClient(cc grpc.ClientConnInterface) JokerClient {
	return &jokerClient{cc}
}

func (c *jokerClient) GetJokes(ctx context.Context, in *JokesRequest, opts ...grpc.CallOption) (*JokesReply, error) {
	out := new(JokesReply)
	err := c.cc.Invoke(ctx, "/Joker/GetJokes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JokerServer is the server API for Joker service.
type JokerServer interface {
	GetJokes(context.Context, *JokesRequest) (*JokesReply, error)
}

// UnimplementedJokerServer can be embedded to have forward compatible implementations.
type UnimplementedJokerServer struct {
}

func (*UnimplementedJokerServer) GetJokes(ctx context.Context, req *JokesRequest) (*JokesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJokes not implemented")
}

func RegisterJokerServer(s *grpc.Server, srv JokerServer) {
	s.RegisterService(&_Joker_serviceDesc, srv)
}

func _Joker_GetJokes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JokesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokerServer).GetJokes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Joker/GetJokes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokerServer).GetJokes(ctx, req.(*JokesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Joker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Joker",
	HandlerType: (*JokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJokes",
			Handler:    _Joker_GetJokes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/joke.proto",
}
